package pj.rozkladWKD;

import java.util.Calendar;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

public class RozkladDbAdapter {
	private static final String DATABASE_NAME = "rozkladDatabase.db";
	private static final String DATABASE_TABLE_ROZKLAD = "rozklad";
	private static final String DATABASE_TABLE_SYNCH = "synchronization";
	
	private static final int DATABASE_VERSION = 1;
	
	public static final String KEY_ID = "_id";
	
	public static final String KEY_WA_SR = "wa_sr";
	public static final int WA_SR_COLUMN = 1;
	
	public static final String KEY_WA_OCH = "wa_och";
	public static final int WA_OCH_COLUMN = 2;
	
	public static final String KEY_WA_ZACH = "wa_zach";
	public static final int WA_ZACH_COLUMN = 3;
	
	public static final String KEY_WA_RED = "wa_der";
	public static final int WA_RED_COLUMN = 4;

	public static final String KEY_WA_AL = "wa_al";
	public static final int WA_AL_COLUMN = 5;
	
	public static final String KEY_WA_RA = "wa_ra";
	public static final int WA_RA_COLUMN = 6;
	
	public static final String KEY_WA_SAL = "wa_sal";
	public static final int WA_SAL_COLUMN = 7;
	
	public static final String KEY_OP = "op";
	public static final int OP_COLUMN = 8;
	
	public static final String KEY_MICH = "mich";
	public static final int MICH_COLUMN = 9;
	
	public static final String KEY_REG = "reg";
	public static final int REG_COLUMN = 10;
	
	public static final String KEY_MAL = "mal";
	public static final int MAL_COLUMN = 11;

	public static final String KEY_TW = "tw";
	public static final int TW_COLUMN = 12;
	
	public static final String KEY_PR = "pr";
	public static final int PR_COLUMN = 13;
	
	public static final String KEY_KOM = "kom";
	public static final int KOM_COLUMN = 14;

	public static final String KEY_NW = "nw";
	public static final int NW_COLUMN = 15;
	
	public static final String KEY_KAN = "kan";
	public static final int KAN_COLUMN = 16;
	
	public static final String KEY_OTR = "otr";
	public static final int OTR_COLUMN = 17;

	public static final String KEY_PL_W = "pl_wsch";
	public static final int PL_WSCH_COLUMN = 18;
	
	public static final String KEY_PL_C = "pl_c";
	public static final int PL_C_COLUMN = 19;
	
	public static final String KEY_PL_Z = "pl_z";
	public static final int PL_Z_COLUMN = 20;
	
	public static final String KEY_POL = "pol";
	public static final int POL_COLUMN = 21;
	
	public static final String KEY_MIL = "mil";
	public static final int MIL_COLUMN = 22;
	
	public static final String KEY_KAZ = "kaz";
	public static final int KAZ_COLUMN = 23;
	
	public static final String KEY_BRZ = "brz";
	public static final int BRZ_COLUMN = 24;
	
	public static final String KEY_GR_OK = "gr_ok";
	public static final int GR_OK_COLUMN = 25;
	
	public static final String KEY_GR_PI = "gr_pi";
	public static final int GR_PI_COLUMN = 26;
	
	public static final String KEY_GR_JOR = "gr_jor";
	public static final int GR_JOR_COLUMN = 27;
	
	public static final String KEY_GR_RAD = "gr_rad";
	public static final int GR_RAD_COLUMN = 28;
	
	public static final String KEY_KTORA_STRONA = "ktora_strona";
	public static final int KTORA_STRONA_COLUMN = 29;
	
	public static final String KEY_DOD ="dodatki";
	public static final int DOD_KEY =30;
	
	/* dla tablicy synchronization */
	public static final String KEY_DATE = "data_synch";
	public static final int DATE_COLUMN = 1;
	
	public static final String KEY_VERSION = "wersja";
	public static final int VERSION_COLUMN = 2;
	
	
	private static final String CREATE_ROZKLAD = "create table " + DATABASE_TABLE_ROZKLAD + " (" +KEY_ID+" integer primary key autoincrement, "+
		KEY_WA_SR + " text, "+ KEY_WA_OCH + " text, "+KEY_WA_ZACH+ " text, "+KEY_WA_RED+ " text, "+
		KEY_WA_AL + " text, "+ KEY_WA_RA + " text, "+ KEY_WA_SAL + " text, "+ KEY_OP + " text, "+
		KEY_MICH + " text, "+ KEY_REG + " text, "+ KEY_MAL + " text, "+ KEY_TW + " text, " +
		KEY_PR + " text, "+KEY_KOM + " text, "+ KEY_NW + " text, "+ KEY_KAN + " text, "+ KEY_OTR + " text, "+
		KEY_PL_W + " text, "+KEY_PL_C + " text, "+ KEY_PL_Z + " text, "+ KEY_POL + " text, "+
		KEY_MIL + " text, "+ KEY_KAZ + " text, "+ KEY_BRZ + " text, "+ KEY_GR_OK + " text, "+
		KEY_GR_PI + " text, "+ KEY_GR_JOR + " text, "+ KEY_GR_RAD + " text, " +KEY_DOD+ " text, " +KEY_KTORA_STRONA + " text);";
	
	private static final String CREATE_SYNCH = "create table " + DATABASE_TABLE_SYNCH +" (" +  KEY_ID +" integer primary key autoincrement, " +
		KEY_DATE + " text, " + KEY_VERSION + " text);";
	
	public static final String[] columnsFromLong = {
		KEY_WA_SR,
		KEY_WA_OCH,
		KEY_WA_ZACH,
		KEY_WA_RED,
		KEY_WA_AL,
		KEY_WA_RA,
		KEY_WA_SAL,
		KEY_OP,
		KEY_MICH,
		KEY_REG,
		KEY_MAL,
		KEY_TW,
		KEY_PR,
		KEY_KOM,
		KEY_NW,
		KEY_KAN,
		KEY_OTR,
		KEY_PL_W,
		KEY_PL_C,
		KEY_PL_Z,
		KEY_POL,
		KEY_MIL,
		KEY_KAZ,
		KEY_BRZ,
		KEY_GR_OK,
		KEY_GR_PI,
		KEY_GR_JOR,
		KEY_GR_RAD,
	};
	
	private SQLiteDatabase db;
	private final Context context;
	private dbHelper dbHelper;
	
	public RozkladDbAdapter(Context context){
		this.context = context;
		dbHelper = new dbHelper(context, DATABASE_NAME, null, DATABASE_VERSION);
	}
	
	private static class dbHelper extends SQLiteOpenHelper {

		public dbHelper(Context context, String name, CursorFactory factory,
				int version) {
			super(context, name, factory, version);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			db.execSQL(CREATE_ROZKLAD);
			db.execSQL(CREATE_SYNCH);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			// Log the version upgrade.
			Log.w("TaskDBAdapter", "Upgrading from version " +
			oldVersion + " to " +
			newVersion +
			", which will destroy all old data");
			// Upgrade the existing database to conform to the new version.
			// Multiple previous versions can be handled by comparing
			// _oldVersion and _newVersion values.
			// The simplest case is to drop the old table and create a
			// new one.
			db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE_ROZKLAD);
			db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE_SYNCH);
			// Create a new one.
			onCreate(db);
			
		}
		
	}
	
	public void open() throws SQLiteException {
		try{
			db = dbHelper.getWritableDatabase();
		} catch(SQLiteException ex){
			db = dbHelper.getReadableDatabase();
		}
	}
	
	public void close(){
		db.close();
	}
	
	public Boolean isSynch(){
		Cursor result = db.query(DATABASE_TABLE_SYNCH, new String[] {KEY_DATE}, KEY_ID + "= 1", null, null, null, null);
		if(result.getCount() == 0 || ! result.moveToFirst())
			return false;
		else 
			return true;
		
	}
	
	public Cursor fetchData(int from, int to){
		
		String[] columns = {KEY_ID, columnsFromLong[from], KEY_DOD };
		
		final Calendar c = Calendar.getInstance();
		int hours = c.get(Calendar.HOUR_OF_DAY);
		int minutes = c.get(Calendar.MINUTE);
	    String currentTime =  String.valueOf(hours)+ ":" + String.valueOf(minutes);
		
	    //do 5 godzin w przód
	    String destinationTime = String.valueOf(hours +5)+ ":" + String.valueOf(minutes);
	  
	    if(to == 0){
	    	to = 1;
	    } else{
	    	to = 2;
	    }
	    
		String selection = KEY_KTORA_STRONA + " = " + to;
		
		return db.query(DATABASE_TABLE_ROZKLAD, columns, selection, null, null, null, null);
	}
	

	
	public void insertSynchronization(){
	
	    
		ContentValues cv = new ContentValues();
		cv.put(KEY_DATE, Long.toString((System.currentTimeMillis())));
		cv.put(KEY_VERSION, "1");
		
		db.insert(DATABASE_TABLE_SYNCH, null, cv);
	}
	
	public void insertEntryGrWa(String[] table){
		db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE_ROZKLAD);
		db.execSQL("DROP TABLE IF EXISTS " + DATABASE_TABLE_SYNCH);
		db.execSQL(CREATE_ROZKLAD);
		db.execSQL(CREATE_SYNCH);
		
		int length;
		ContentValues cv;
		String[] podzielone;
		
		Boolean update = false;
		if(isSynch()) update = true; 
		for(int i= 1; i<67; i++){
			cv = new ContentValues();
			table[i] = table[i].replaceAll("\n       ", "");
			podzielone = table[i].split(" ");
			length = podzielone.length; 
			
				cv.put(KEY_DOD, podzielone[0].trim());
		
			if(length == 9) {
				cv.put(KEY_GR_RAD, podzielone[1].trim());
				cv.put(KEY_PL_C, podzielone[8].trim());
			}
			
			else if(length==15){
				cv.put(KEY_KOM, podzielone[1].trim());
				cv.put(KEY_PR, podzielone[2].trim());
				
				cv.put(KEY_TW, podzielone[3].trim());
				cv.put(KEY_MAL, podzielone[4].trim());
				
				cv.put(KEY_REG, podzielone[5].trim());
				cv.put(KEY_MICH, podzielone[6].trim());
				
				cv.put(KEY_OP, podzielone[7].trim());
				cv.put(KEY_WA_SAL, podzielone[8].trim());
				
				cv.put(KEY_WA_RA, podzielone[9].trim());
				cv.put(KEY_WA_AL, podzielone[10].trim());
				
				cv.put(KEY_WA_RED, podzielone[11].trim());
				cv.put(KEY_WA_ZACH, podzielone[12].trim());
				
				cv.put(KEY_WA_OCH, podzielone[13].trim());
				cv.put(KEY_WA_SR, podzielone[14].trim());
			} else if(length==20){
				cv.put(KEY_PL_C, podzielone[1].trim());
				cv.put(KEY_PL_W, podzielone[2].trim());
				cv.put(KEY_OTR, podzielone[3].trim());
				
				cv.put(KEY_KAN, podzielone[4].trim());
				cv.put(KEY_NW, podzielone[5].trim());
				
				cv.put(KEY_KOM, podzielone[6].trim());
				cv.put(KEY_PR, podzielone[7].trim());
				
				cv.put(KEY_TW, podzielone[8].trim());
				cv.put(KEY_MAL, podzielone[9].trim());
				
				cv.put(KEY_REG, podzielone[10].trim());
				cv.put(KEY_MICH, podzielone[11].trim());
				
				cv.put(KEY_OP, podzielone[12].trim());
				cv.put(KEY_WA_SAL, podzielone[13].trim());
				
				cv.put(KEY_WA_RA, podzielone[14].trim());
				cv.put(KEY_WA_AL, podzielone[15].trim());
				
				cv.put(KEY_WA_RED, podzielone[16].trim());
				cv.put(KEY_WA_ZACH, podzielone[17].trim());
				
				cv.put(KEY_WA_OCH, podzielone[18].trim());
				cv.put(KEY_WA_SR, podzielone[19].trim());
			} else if(length==23){
				cv.put(KEY_MIL, podzielone[1].trim());
				cv.put(KEY_POL, podzielone[2].trim());
				cv.put(KEY_PL_Z, podzielone[3].trim());
				
				cv.put(KEY_PL_C, podzielone[4].trim());
				cv.put(KEY_PL_W, podzielone[5].trim());
				cv.put(KEY_OTR, podzielone[6].trim());
				
				cv.put(KEY_KAN, podzielone[7].trim());
				cv.put(KEY_NW, podzielone[8].trim());
				
				cv.put(KEY_KOM, podzielone[9].trim());
				cv.put(KEY_PR, podzielone[10].trim());
				
				cv.put(KEY_TW, podzielone[11].trim());
				cv.put(KEY_MAL, podzielone[12].trim());
				
				cv.put(KEY_REG, podzielone[13].trim());
				cv.put(KEY_MICH, podzielone[14].trim());
				
				cv.put(KEY_OP, podzielone[15].trim());
				cv.put(KEY_WA_SAL, podzielone[16].trim());
				
				cv.put(KEY_WA_RA, podzielone[17].trim());
				cv.put(KEY_WA_AL, podzielone[18].trim());
				
				cv.put(KEY_WA_RED, podzielone[19].trim());
				cv.put(KEY_WA_ZACH, podzielone[20].trim());
				
				cv.put(KEY_WA_OCH, podzielone[21].trim());
				cv.put(KEY_WA_SR, podzielone[22].trim());
			} else if(length==27){
				cv.put(KEY_GR_RAD, podzielone[1].trim());
				cv.put(KEY_GR_JOR, podzielone[2].trim());
				cv.put(KEY_GR_PI, podzielone[3].trim());
				cv.put(KEY_GR_OK, podzielone[4].trim());

				cv.put(KEY_BRZ, podzielone[5].trim());
				cv.put(KEY_KAZ, podzielone[6].trim());
				cv.put(KEY_PL_Z, podzielone[7].trim());
				
				
				cv.put(KEY_PL_C, podzielone[8].trim());
				cv.put(KEY_PL_W, podzielone[9].trim());
				cv.put(KEY_OTR, podzielone[10].trim());
				
				cv.put(KEY_KAN, podzielone[11].trim());
				cv.put(KEY_NW, podzielone[12].trim());
				
				cv.put(KEY_KOM, podzielone[13].trim());
				cv.put(KEY_PR, podzielone[14].trim());
				
				cv.put(KEY_TW, podzielone[15].trim());
				cv.put(KEY_MAL, podzielone[16].trim());
				
				cv.put(KEY_REG, podzielone[17].trim());
				cv.put(KEY_MICH, podzielone[18].trim());
				
				cv.put(KEY_OP, podzielone[19].trim());
				cv.put(KEY_WA_SAL, podzielone[20].trim());
				
				cv.put(KEY_WA_RA, podzielone[21].trim());
				cv.put(KEY_WA_AL, podzielone[22].trim());
				
				cv.put(KEY_WA_RED, podzielone[23].trim());
				cv.put(KEY_WA_ZACH, podzielone[24].trim());
				
				cv.put(KEY_WA_OCH, podzielone[25].trim());
				cv.put(KEY_WA_SR, podzielone[26].trim());
			}
			//1 - grodzisk warszawa, 2 - warszawa grodzisk
			cv.put(KEY_KTORA_STRONA, "1");
			if(update)
				db.update(DATABASE_TABLE_ROZKLAD, cv, KEY_ID + " = " + (i+1), null);
			else
				db.insert(DATABASE_TABLE_ROZKLAD, null, cv);	
			
		}
		
	}
	public void insertEntryWaGr(String[] table){
	
		
		int length;
		ContentValues cv;
		String[] podzielone;
		
		Boolean update = false;
		if(isSynch()) update = true; 
		for(int i= 1; i<67; i++){
			cv = new ContentValues();
			table[i] = table[i].replaceAll("\n       ", "");
			podzielone = table[i].split(" ");
			length = podzielone.length; 
			
			cv.put(KEY_DOD, podzielone[0].trim());
			
			if(length == 5) {
				cv.put(KEY_PL_C, podzielone[1].trim());
				cv.put(KEY_PL_Z, podzielone[2].trim());
				cv.put(KEY_POL, podzielone[3].trim());
				cv.put(KEY_MIL, podzielone[4].trim());
			}
			
			else if(length==15){
				cv.put(KEY_KOM, podzielone[14].trim());
				cv.put(KEY_PR, podzielone[13].trim());
				
				cv.put(KEY_TW, podzielone[12].trim());
				cv.put(KEY_MAL, podzielone[11].trim());
				
				cv.put(KEY_REG, podzielone[10].trim());
				cv.put(KEY_MICH, podzielone[9].trim());
				
				cv.put(KEY_OP, podzielone[8].trim());
				cv.put(KEY_WA_SAL, podzielone[7].trim());
				
				cv.put(KEY_WA_RA, podzielone[6].trim());
				cv.put(KEY_WA_AL, podzielone[5].trim());
				
				cv.put(KEY_WA_RED, podzielone[4].trim());
				cv.put(KEY_WA_ZACH, podzielone[3].trim());
				
				cv.put(KEY_WA_OCH, podzielone[2].trim());
				cv.put(KEY_WA_SR, podzielone[1].trim());
			} else if(length==20){
				cv.put(KEY_PL_C, podzielone[19].trim());
				cv.put(KEY_PL_W, podzielone[18].trim());
				cv.put(KEY_OTR, podzielone[17].trim());
				
				cv.put(KEY_KAN, podzielone[16].trim());
				cv.put(KEY_NW, podzielone[15].trim());
				
				cv.put(KEY_KOM, podzielone[14].trim());
				cv.put(KEY_PR, podzielone[13].trim());
				
				cv.put(KEY_TW, podzielone[12].trim());
				cv.put(KEY_MAL, podzielone[11].trim());
				
				cv.put(KEY_REG, podzielone[10].trim());
				cv.put(KEY_MICH, podzielone[9].trim());
				
				cv.put(KEY_OP, podzielone[8].trim());
				cv.put(KEY_WA_SAL, podzielone[7].trim());
				
				cv.put(KEY_WA_RA, podzielone[6].trim());
				cv.put(KEY_WA_AL, podzielone[5].trim());
				
				cv.put(KEY_WA_RED, podzielone[4].trim());
				cv.put(KEY_WA_ZACH, podzielone[3].trim());
				
				cv.put(KEY_WA_OCH, podzielone[2].trim());
				cv.put(KEY_WA_SR, podzielone[1].trim());
			} else if(length==23){
				cv.put(KEY_MIL, podzielone[22].trim());
				cv.put(KEY_POL, podzielone[21].trim());
				cv.put(KEY_PL_Z, podzielone[20].trim());
				
				cv.put(KEY_PL_C, podzielone[19].trim());
				cv.put(KEY_PL_W, podzielone[18].trim());
				cv.put(KEY_OTR, podzielone[17].trim());
				
				cv.put(KEY_KAN, podzielone[16].trim());
				cv.put(KEY_NW, podzielone[15].trim());
				
				cv.put(KEY_KOM, podzielone[14].trim());
				cv.put(KEY_PR, podzielone[13].trim());
				
				cv.put(KEY_TW, podzielone[12].trim());
				cv.put(KEY_MAL, podzielone[11].trim());
				
				cv.put(KEY_REG, podzielone[10].trim());
				cv.put(KEY_MICH, podzielone[9].trim());
				
				cv.put(KEY_OP, podzielone[8].trim());
				cv.put(KEY_WA_SAL, podzielone[7].trim());
				
				cv.put(KEY_WA_RA, podzielone[6].trim());
				cv.put(KEY_WA_AL, podzielone[5].trim());
				
				cv.put(KEY_WA_RED, podzielone[4].trim());
				cv.put(KEY_WA_ZACH, podzielone[3].trim());
				
				cv.put(KEY_WA_OCH, podzielone[2].trim());
				cv.put(KEY_WA_SR, podzielone[1].trim());
			} else if(length==27){
				cv.put(KEY_GR_RAD, podzielone[26].trim());
				cv.put(KEY_GR_JOR, podzielone[25].trim());
				cv.put(KEY_GR_PI, podzielone[24].trim());
				cv.put(KEY_GR_OK, podzielone[23].trim());

				cv.put(KEY_BRZ, podzielone[22].trim());
				cv.put(KEY_KAZ, podzielone[21].trim());
				cv.put(KEY_PL_Z, podzielone[20].trim());
				
				
				cv.put(KEY_PL_C, podzielone[19].trim());
				cv.put(KEY_PL_W, podzielone[18].trim());
				cv.put(KEY_OTR, podzielone[17].trim());
				
				cv.put(KEY_KAN, podzielone[16].trim());
				cv.put(KEY_NW, podzielone[15].trim());
				
				cv.put(KEY_KOM, podzielone[14].trim());
				cv.put(KEY_PR, podzielone[13].trim());
				
				cv.put(KEY_TW, podzielone[12].trim());
				cv.put(KEY_MAL, podzielone[11].trim());
				
				cv.put(KEY_REG, podzielone[10].trim());
				cv.put(KEY_MICH, podzielone[9].trim());
				
				cv.put(KEY_OP, podzielone[8].trim());
				cv.put(KEY_WA_SAL, podzielone[7].trim());
				
				cv.put(KEY_WA_RA, podzielone[6].trim());
				cv.put(KEY_WA_AL, podzielone[5].trim());
				
				cv.put(KEY_WA_RED, podzielone[4].trim());
				cv.put(KEY_WA_ZACH, podzielone[3].trim());
				
				cv.put(KEY_WA_OCH, podzielone[2].trim());
				cv.put(KEY_WA_SR, podzielone[1].trim());
			}
			//1 - grodzisk warszawa, 2 - warszawa grodzisk
			cv.put(KEY_KTORA_STRONA, "2");
			if(update)
				db.update(DATABASE_TABLE_ROZKLAD, cv, KEY_ID + " = " + (i+1), null);
			else
				db.insert(DATABASE_TABLE_ROZKLAD, null, cv);	
			
		}
		
	}
}

